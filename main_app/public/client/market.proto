syntax = "proto3";

// Package ProtobufMarkets contains definitions for series update messages;
// the main wrapper messages is a MarketUpdateMessage.

// NOTE: While a lot of these types have been expanded to indices, to prevent
// breaking clients by changing protbuf message types and names
// we'll just leave the package as ProtobufMarkets
package ProtobufMarkets;

// Market represents a currency pair on a particular exchange.
message Market {
  // Prefer integer ids to string slugs (far fewer bytes)
  uint64 exchangeId = 3;
  uint64 currencyPairId = 4;

  // New IDs from SQL; TODO remove 1,2,3,4 when migrationt o 5,6 is complete
  uint64 marketId = 5;

  // Deprecated
  string exchange = 1;
  string currencyPair = 2;
}

// Order represents an ask or a bid.
message Order {
  string priceStr = 3;
  string amountStr = 4;

  reserved "price", "amount";
  reserved 1, 2;
}

// Trade is a single trade in TradesUpdate
message Trade {
  // Exchange-specific ID
  string externalId = 11;

  int64 timestamp = 2;
  int64 timestampNano = 10;

  string priceStr = 8;
  string amountStr = 9;

  enum OrderSide {
    UNKNOWN = 0;
    BUYSIDE = 1;
    SELLSIDE = 2;
  }
  OrderSide orderSide = 13;

  reserved "price", "amount", "timestampMillis", "id", "priceDouble", "amountDouble", "side";
  reserved 1, 3, 4, 5, 6, 7, 12;

  // Deprecated
  // Enum definitions are properties on the top-level message, so
  // BUY and SELL are actually reserved on Trade. We need to keep
  // this definition around because there doens't seem to be a way to
  // reserve/deprecate enum values
  enum Side {
    option deprecated = true;
    BUY = 0 [deprecated = true];
    SELL = 1 [deprecated = true];
  }
}

// MarketUpdateMessage is the primary message for market updates; it wraps all
// other more specific update types.
message MarketUpdateMessage {
  reserved 8;

  Market market = 9;

  oneof Update {
    OrderBookUpdate orderBookUpdate = 2;
    OrderBookDeltaUpdate orderBookDeltaUpdate = 3;
    OrderBookSpreadUpdate orderBookSpreadUpdate = 11;
    OrderBookLiquidityUpdate orderBookLiquidityUpdate = 12;

    TradesUpdate tradesUpdate = 4;
    IntervalsUpdate intervalsUpdate = 5;
    SummaryUpdate summaryUpdate = 6;
    SparklineUpdate sparklineUpdate = 7;

  }
}

// OrderBookUpdate represents a snapshot of the order book: a set of asks and
// bids for the particular aggregation modulus.
message OrderBookUpdate {
  // Aggregation modulus is a value which all bids and asks in this particular
  // OrderBookUpdate are divisible by. E.g. could be 1 (no aggregation), 5, 10,
  // 50, 100, etc. Exact possible values are set for each market individually.
  string aggregationModulusStr = 4;

  int32 seqNum = 5;

  repeated Order bids = 1;
  repeated Order asks = 2;

  reserved "aggregationModulus";
  reserved 3;
}

// OrderBookDeltaUpdate represents a delta which needs to be applied to the
// local order book.
message OrderBookDeltaUpdate {
  // Aggregation modulus is a value which all bids and asks in this particular
  // OrderBookUpdate are divisible by. E.g. could be 1 (no aggregation), 5, 10,
  // 50, 100, etc. Exact possible values are set for each market individually.
  string aggregationModulusStr = 4;

  int32 seqNum = 5;

  message OrderDeltas {
    // Either add a new order at a particular price, or replace existing one
    // (with the new amount)
    repeated Order set = 1;
    // TODO: I see we don't really use deltas, and just use set?
    repeated Order delta = 2;
    // Remove order at a particular price
    repeated string removeStr = 4;

    reserved "remove";
    reserved 3;
  }

  // Deltas for bids
  OrderDeltas bids = 1;
  // Deltas for asks
  OrderDeltas asks = 2;

  reserved "aggregationModulus";
  reserved 3;
}

// OrderBookSpreadUpdate represents only the best bid & ask
message OrderBookSpreadUpdate {
  int64 timestamp = 1;
  Order bid = 2;
  Order ask = 3;
}

// OrderBookLiquidityUpdate represents sums for various bips in the book
message OrderBookLiquidityUpdate {
    int64 timestamp = 1;

    message OrderBookLiquiditySums {
        string totalBase = 1;
        string totalQuote = 2;
    }

    message OrderBookLiquidityUpdateSide {
        OrderBookLiquiditySums bip25  = 1; // 0.25%
        OrderBookLiquiditySums bip50  = 2; // 0.50%
        OrderBookLiquiditySums bip75  = 3; // 0.75%
        OrderBookLiquiditySums bip100 = 4; // 1.00%
        OrderBookLiquiditySums bip150 = 5; // 1.50%
        OrderBookLiquiditySums bip200 = 6; // 2.00%
        OrderBookLiquiditySums bip250 = 7; // 2.50%
        OrderBookLiquiditySums bip300 = 8; // 3.00%
        OrderBookLiquiditySums bip400 = 9; // 4.00%
        OrderBookLiquiditySums bip500 = 10; // 5.00%
    }

    OrderBookLiquidityUpdateSide bid = 2;
    OrderBookLiquidityUpdateSide ask = 3;
}

// TradesUpdate represents a set of new trades.
message TradesUpdate {
  repeated Trade trades = 1;
}

// Interval represents a single OHLC candle.
message Interval {
  message OHLC {
    string openStr = 5;
    string highStr = 6;
    string lowStr = 7;
    string closeStr = 8;

    reserved "open", "high", "low", "close";
    reserved 1, 2, 3, 4;
  }

  int64 closetime = 1;

  OHLC ohlc = 2;

  string volumeBaseStr = 6;
  string volumeQuoteStr = 7;

  string periodName = 9;

  // Deprecated
  reserved "volumeBase", "volumeQuote";
  reserved 3, 5;

  int32 period = 4;
}

// IntervalsUpdate represents a set of new Intervals (OHLC candles)
message IntervalsUpdate {
  repeated Interval intervals = 1;
}

// SummaryUpdate is a market summary update
message SummaryUpdate {
  reserved 1;

  string lastStr = 10;
  string highStr = 11;
  string lowStr = 12;
  string volumeBaseStr = 13;
  string volumeQuoteStr = 14;
  string changeAbsoluteStr = 15;
  string changePercentStr = 16;

  int32 numTrades = 8;

  reserved "last", "high", "low", "volumeBase", "volumeQuote", "changeAbsolute", "changePercent";
  reserved 2, 3, 4, 5, 6, 7, 9;
}

message SparklineUpdate {
  int64 time = 2;
  string priceStr = 4;

  reserved "price";
  reserved 1, 3;
}